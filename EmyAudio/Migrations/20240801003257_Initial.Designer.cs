// <auto-generated />
using System;
using EmyAudio;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EmyAudio.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240801003257_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AudioInfoToTagJoin", b =>
                {
                    b.Property<string>("AudioInfoId")
                        .HasColumnType("text");

                    b.Property<string>("TagName")
                        .HasColumnType("text");

                    b.HasKey("AudioInfoId", "TagName");

                    b.HasIndex("TagName");

                    b.ToTable("AudioInfoToTagJoin");
                });

            modelBuilder.Entity("EmyAudio.Models.AudioInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<DateOnly>("LastPlayed")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Next")
                        .HasColumnType("text");

                    b.Property<string>("Previous")
                        .HasColumnType("text");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<long>("TimePlayed")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AudioInfos");
                });

            modelBuilder.Entity("EmyAudio.Models.AudioSkip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AudioInfoId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("End")
                        .HasColumnType("bigint");

                    b.Property<long>("Start")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AudioInfoId");

                    b.ToTable("AudioSkips");
                });

            modelBuilder.Entity("EmyAudio.Models.Tag", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("Downloaded")
                        .HasColumnType("boolean");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<string>("Next")
                        .HasColumnType("text");

                    b.Property<string>("OriginalPlaylistId")
                        .HasColumnType("text");

                    b.Property<string>("Parent")
                        .HasColumnType("text");

                    b.Property<string>("Previous")
                        .HasColumnType("text");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Name");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("AudioInfoToTagJoin", b =>
                {
                    b.HasOne("EmyAudio.Models.AudioInfo", null)
                        .WithMany()
                        .HasForeignKey("AudioInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmyAudio.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmyAudio.Models.AudioSkip", b =>
                {
                    b.HasOne("EmyAudio.Models.AudioInfo", "AudioInfo")
                        .WithMany("Skips")
                        .HasForeignKey("AudioInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AudioInfo");
                });

            modelBuilder.Entity("EmyAudio.Models.AudioInfo", b =>
                {
                    b.Navigation("Skips");
                });
#pragma warning restore 612, 618
        }
    }
}
